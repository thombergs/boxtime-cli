import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.graalvm.buildtools.native' version '0.9.18'
    id 'org.jetbrains.kotlin.jvm' version '1.7.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.21'
    id 'org.jetbrains.kotlin.kapt' version '1.7.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.21'
}

group = 'io.boxtime'
version = '0.0.11'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'info.picocli:picocli-spring-boot-starter:4.7.0'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
    runtimeOnly 'com.h2database:h2'
    kapt 'info.picocli:picocli-codegen:4.7.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

kapt {
    arguments {
        arg("project", "${project.group}/${project.name}")
    }
}

graalvmNative {
    binaries {
        test{
            buildArgs.add('-H:+ReportExceptionStackTraces')
        }
        main {
            buildArgs.add('-H:+ReportExceptionStackTraces')
        }
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('alfred', Zip){
    from('build/alfred/resources')
    include('*')
    archiveFileName = 'Boxtime.alfredworkflow'
    destinationDirectory = file('build/alfred')
    dependsOn alfredPrepare
}

tasks.register('alfredPrepare') {
    doLast {
        copy {
            from('src/main/resources/alfred')
            into('build/alfred/resources')
            include('*')
            filter { line -> line.replaceAll('@@PROJECT.VERSION@@', project.version) }
        }
    }
}

tasks.register('printVersion') {
    println project.version
}

processResources {
    filesMatching(['**/application.yml', '**/version.txt', '**/info.plist']) {
        filter {
            it.replace('@@PROJECT.VERSION@@', project.version)
        }
    }
}

